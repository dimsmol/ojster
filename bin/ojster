#!/usr/bin/env node

"use strict";
var argv = require('optimist').argv;
var ojster = require('../lib');

function abort(str) {
	console.error(str);
	process.exit(1);
}

var args = argv._;
var l = args.length;
if (l < 1) {
	abort('srcPath argument required');
}

var srcPath = args[0];
var dstPath = null;
if (l >= 2) {
	dstPath = args[1];
}

var options = {
	silent: false
};

var generatorClass = null;
var clientType = null;
if (argv.goog) {
	generatorClass = ojster.generators.GoogGenerator;
}
else if (argv.client || argv.amd || argv.browserglobals) {
	generatorClass = ojster.generators.ClientGenerator;
	if (argv.amd) {
		clientType = 'amd';
	}
	else if (argv.browserglobals) {
		clientType = 'browserglobals';
	}
}

var useScope = !!argv.scope;
var useOldBaseCall = !!argv.oldbase;
var noStrict = !!argv.noStrict;
if (generatorClass != null || useScope || noStrict) {
	options.generator = options.generator || {};
	if (generatorClass != null) {
		options.generator.generatorClass = generatorClass;
	}
	if (useScope) {
		options.generator.useScope = useScope;
	}
	if (useOldBaseCall) {
		options.generator.useOldBaseCall = useOldBaseCall;
	}
	if (noStrict) {
		options.generator.useStrict = false;
	}
	if (clientType) {
		options.generator.clientType = clientType;
	}
}

if (argv.tab) {
	var tabSize = parseInt(argv.tab, 10); // WARN can return NaN
	if (tabSize > 0) {
		options.tabSize = tabSize;
	}
}

if (argv.indent) {
	options.generator = options.generator || {};
	options.generator.indentStr = argv.indent;
}

if (argv.ext) {
	options.ext = argv.ext;
}

ojster.compilePath(srcPath, dstPath, options, function (err, results) {
	if (err) {
		process.exit(1);
	}

	process.exit(0);
});
